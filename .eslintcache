[{"/home/user/webapp/src/index.js":"1","/home/user/webapp/src/reportWebVitals.js":"2","/home/user/webapp/src/App.js":"3","/home/user/webapp/src/theme/ThemeContext.js":"4","/home/user/webapp/src/components/layout/Header.js":"5","/home/user/webapp/src/components/onboarding/Onboarding.js":"6","/home/user/webapp/src/components/dashboard/Dashboard.js":"7","/home/user/webapp/src/components/market/MarketBrowse.js":"8","/home/user/webapp/src/components/instrument/InstrumentDetails.js":"9","/home/user/webapp/src/components/order/OrderScreen.js":"10","/home/user/webapp/src/components/portfolio/Portfolio.js":"11","/home/user/webapp/src/components/profile/Profile.js":"12","/home/user/webapp/src/theme/colors.js":"13","/home/user/webapp/src/data/bangladeshMarket.js":"14"},{"size":500,"mtime":1757040267932,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1757040267932,"results":"17","hashOfConfig":"16"},{"size":2696,"mtime":1757040615211,"results":"18","hashOfConfig":"16"},{"size":1000,"mtime":1757040557212,"results":"19","hashOfConfig":"16"},{"size":4224,"mtime":1757040657707,"results":"20","hashOfConfig":"16"},{"size":9876,"mtime":1757040710438,"results":"21","hashOfConfig":"16"},{"size":11723,"mtime":1757040771758,"results":"22","hashOfConfig":"16"},{"size":12371,"mtime":1757040843347,"results":"23","hashOfConfig":"16"},{"size":12774,"mtime":1757040916118,"results":"24","hashOfConfig":"16"},{"size":17271,"mtime":1757041021570,"results":"25","hashOfConfig":"16"},{"size":17553,"mtime":1757041110707,"results":"26","hashOfConfig":"16"},{"size":19372,"mtime":1757041203914,"results":"27","hashOfConfig":"16"},{"size":1600,"mtime":1757040551179,"results":"28","hashOfConfig":"16"},{"size":9869,"mtime":1757040604337,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vrcboj",{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/user/webapp/src/index.js",[],"/home/user/webapp/src/reportWebVitals.js",[],"/home/user/webapp/src/App.js",[],"/home/user/webapp/src/theme/ThemeContext.js",[],"/home/user/webapp/src/components/layout/Header.js",[],"/home/user/webapp/src/components/onboarding/Onboarding.js",["64","65"],"import React, { useState } from 'react';\nimport { useTheme } from '../../theme/ThemeContext';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport SecurityIcon from '@material-ui/icons/Security';\nimport PhoneAndroidIcon from '@material-ui/icons/PhoneAndroid';\nimport AccountBalanceIcon from '@material-ui/icons/AccountBalance';\nimport './Onboarding.css';\n\nfunction Onboarding({ onLogin }) {\n  const { theme } = useTheme();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [formData, setFormData] = useState({\n    fullName: '',\n    email: '',\n    phone: '',\n    nidNumber: '',\n    bankAccount: '',\n    password: '',\n    confirmPassword: '',\n    agreeTerms: false\n  });\n\n  const steps = [\n    { title: 'Welcome to KOSH', subtitle: 'Your gateway to Bangladesh capital markets' },\n    { title: 'Personal Information', subtitle: 'Let\\'s get to know you better' },\n    { title: 'Security Setup', subtitle: 'Protect your investments' },\n    { title: 'You\\'re all set!', subtitle: 'Start investing in DSE, mutual funds, and more' }\n  ];\n\n  const features = [\n    {\n      icon: <TrendingUpIcon />,\n      title: 'DSE Stocks',\n      description: 'Trade top performing stocks from Dhaka Stock Exchange'\n    },\n    {\n      icon: <AccountBalanceIcon />,\n      title: 'Mutual Funds',\n      description: 'Diversify with professionally managed investment funds'\n    },\n    {\n      icon: <SecurityIcon />,\n      title: 'Government T-Bills',\n      description: 'Secure investments backed by Bangladesh government'\n    },\n    {\n      icon: <PhoneAndroidIcon />,\n      title: 'Digital Gold',\n      description: 'Invest in 24K pure digital gold with instant liquidity'\n    }\n  ];\n\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n\n  const handleNext = () => {\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (currentStep === steps.length - 1) {\n      // Complete onboarding\n      onLogin({\n        id: 'demo-user-1',\n        name: formData.fullName,\n        email: formData.email,\n        phone: formData.phone,\n        joinedDate: new Date().toISOString()\n      });\n    } else {\n      handleNext();\n    }\n  };\n\n  const renderWelcomeStep = () => (\n    <div className=\"welcome__content\">\n      <div className=\"welcome__hero\">\n        <div className=\"hero__logo\" style={{ background: `linear-gradient(135deg, ${theme.primary} 0%, ${theme.accent} 100%)` }}>\n          <span>KOSH</span>\n        </div>\n        <h1 style={{ color: theme.textPrimary }}>\n          Welcome to the Future of Investing in Bangladesh\n        </h1>\n        <p style={{ color: theme.textSecondary }}>\n          Trade stocks, mutual funds, gold, and government securities all in one place.\n          Built for Bangladeshi investors.\n        </p>\n      </div>\n\n      <div className=\"features__grid\">\n        {features.map((feature, index) => (\n          <div key={index} className=\"feature__card\" style={{ backgroundColor: theme.card, border: `1px solid ${theme.border}` }}>\n            <div className=\"feature__icon\" style={{ color: theme.primary }}>\n              {feature.icon}\n            </div>\n            <h3 style={{ color: theme.textPrimary }}>{feature.title}</h3>\n            <p style={{ color: theme.textSecondary }}>{feature.description}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderPersonalInfoStep = () => (\n    <div className=\"form__content\">\n      <div className=\"form__group\">\n        <label style={{ color: theme.textPrimary }}>Full Name</label>\n        <input\n          type=\"text\"\n          name=\"fullName\"\n          value={formData.fullName}\n          onChange={handleInputChange}\n          className=\"input\"\n          placeholder=\"Enter your full name\"\n          required\n        />\n      </div>\n      <div className=\"form__group\">\n        <label style={{ color: theme.textPrimary }}>Email Address</label>\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={formData.email}\n          onChange={handleInputChange}\n          className=\"input\"\n          placeholder=\"Enter your email\"\n          required\n        />\n      </div>\n      <div className=\"form__group\">\n        <label style={{ color: theme.textPrimary }}>Phone Number</label>\n        <input\n          type=\"tel\"\n          name=\"phone\"\n          value={formData.phone}\n          onChange={handleInputChange}\n          className=\"input\"\n          placeholder=\"+880 1XXX-XXXXXX\"\n          required\n        />\n      </div>\n      <div className=\"form__group\">\n        <label style={{ color: theme.textPrimary }}>NID Number</label>\n        <input\n          type=\"text\"\n          name=\"nidNumber\"\n          value={formData.nidNumber}\n          onChange={handleInputChange}\n          className=\"input\"\n          placeholder=\"National ID number\"\n          required\n        />\n      </div>\n      <div className=\"form__group\">\n        <label style={{ color: theme.textPrimary }}>Bank Account Number</label>\n        <input\n          type=\"text\"\n          name=\"bankAccount\"\n          value={formData.bankAccount}\n          onChange={handleInputChange}\n          className=\"input\"\n          placeholder=\"Your bank account for transactions\"\n          required\n        />\n      </div>\n    </div>\n  );\n\n  const renderSecurityStep = () => (\n    <div className=\"form__content\">\n      <div className=\"form__group\">\n        <label style={{ color: theme.textPrimary }}>Create Password</label>\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={formData.password}\n          onChange={handleInputChange}\n          className=\"input\"\n          placeholder=\"Minimum 8 characters\"\n          required\n        />\n      </div>\n      <div className=\"form__group\">\n        <label style={{ color: theme.textPrimary }}>Confirm Password</label>\n        <input\n          type=\"password\"\n          name=\"confirmPassword\"\n          value={formData.confirmPassword}\n          onChange={handleInputChange}\n          className=\"input\"\n          placeholder=\"Re-enter your password\"\n          required\n        />\n      </div>\n      <div className=\"checkbox__group\">\n        <label className=\"checkbox__label\">\n          <input\n            type=\"checkbox\"\n            name=\"agreeTerms\"\n            checked={formData.agreeTerms}\n            onChange={handleInputChange}\n            required\n          />\n          <span style={{ color: theme.textPrimary }}>\n            I agree to the <a href=\"#\" style={{ color: theme.primary }}>Terms of Service</a> and{' '}\n            <a href=\"#\" style={{ color: theme.primary }}>Privacy Policy</a>\n          </span>\n        </label>\n      </div>\n    </div>\n  );\n\n  const renderCompleteStep = () => (\n    <div className=\"complete__content\">\n      <div className=\"success__icon\" style={{ color: theme.success }}>\n        ✓\n      </div>\n      <h2 style={{ color: theme.textPrimary }}>\n        Congratulations, {formData.fullName}!\n      </h2>\n      <p style={{ color: theme.textSecondary }}>\n        Your KOSH account has been created successfully. You can now start exploring\n        Bangladesh's financial markets and build your investment portfolio.\n      </p>\n      <div className=\"next__steps\">\n        <h4 style={{ color: theme.textPrimary }}>What's next?</h4>\n        <ul style={{ color: theme.textSecondary }}>\n          <li>Explore top DSE stocks and market trends</li>\n          <li>Browse mutual funds from leading fund houses</li>\n          <li>Start your digital gold savings journey</li>\n          <li>Invest in secure government T-Bills</li>\n        </ul>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"onboarding\" style={{ backgroundColor: theme.background, minHeight: '100vh' }}>\n      <div className=\"onboarding__container\">\n        {/* Progress Indicator */}\n        <div className=\"progress__indicator\">\n          {steps.map((_, index) => (\n            <div\n              key={index}\n              className={`progress__dot ${index <= currentStep ? 'progress__dot--active' : ''}`}\n              style={{\n                backgroundColor: index <= currentStep ? theme.primary : theme.border\n              }}\n            />\n          ))}\n        </div>\n\n        {/* Step Header */}\n        <div className=\"step__header\">\n          <h2 style={{ color: theme.textPrimary }}>{steps[currentStep].title}</h2>\n          <p style={{ color: theme.textSecondary }}>{steps[currentStep].subtitle}</p>\n        </div>\n\n        {/* Step Content */}\n        <form onSubmit={handleSubmit} className=\"onboarding__form\">\n          <div className=\"step__content\">\n            {currentStep === 0 && renderWelcomeStep()}\n            {currentStep === 1 && renderPersonalInfoStep()}\n            {currentStep === 2 && renderSecurityStep()}\n            {currentStep === 3 && renderCompleteStep()}\n          </div>\n\n          {/* Navigation */}\n          <div className=\"step__navigation\">\n            {currentStep > 0 && currentStep < steps.length - 1 && (\n              <button\n                type=\"button\"\n                onClick={handlePrevious}\n                className=\"btn btn-outline\"\n              >\n                Previous\n              </button>\n            )}\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              style={{ marginLeft: 'auto' }}\n            >\n              {currentStep === 0 ? 'Get Started' : \n               currentStep === steps.length - 1 ? 'Enter KOSH' : 'Continue'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Onboarding;","/home/user/webapp/src/components/dashboard/Dashboard.js",["66","67","68"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useTheme } from '../../theme/ThemeContext';\nimport { dseStocks, mutualFunds } from '../../data/bangladeshMarket';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport TrendingDownIcon from '@material-ui/icons/TrendingDown';\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\nimport './Dashboard.css';\n\nfunction Dashboard() {\n  const { theme } = useTheme();\n  const [portfolioData, setPortfolioData] = useState({\n    totalValue: 125000,\n    todayChange: 2450,\n    todayChangePercent: 2.00,\n    totalReturn: 15000,\n    totalReturnPercent: 13.64\n  });\n\n  const [watchlist] = useState([\n    'SQURPHAR', 'BRACBANK', 'GRAMEENPHONE', 'WALTONHIL', 'BEXIMCO'\n  ]);\n\n  const [quickStats] = useState({\n    dseIndex: { value: 6842.35, change: 45.67, changePercent: 0.67 },\n    goldPrice: { value: 7850, change: 25, changePercent: 0.32 },\n    usdRate: { value: 109.50, change: -0.25, changePercent: -0.23 }\n  });\n\n  // Get portfolio holdings from localStorage (demo data)\n  const [holdings] = useState([\n    { symbol: 'SQURPHAR', shares: 50, avgPrice: 154.50, category: 'stocks' },\n    { symbol: 'GRAMEENPHONE', shares: 25, avgPrice: 292.70, category: 'stocks' },\n    { symbol: 'BRACMF', shares: 1000, avgPrice: 14.35, category: 'mutualfunds' },\n    { symbol: 'GOLD_1G', grams: 15.5, avgPrice: 7825.00, category: 'gold' }\n  ]);\n\n  const getWatchlistData = () => {\n    return watchlist.map(symbol => {\n      const stock = dseStocks.find(s => s.symbol === symbol);\n      return stock || null;\n    }).filter(Boolean);\n  };\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('en-BD', {\n      style: 'currency',\n      currency: 'BDT',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const formatNumber = (num) => {\n    return new Intl.NumberFormat('en-BD').format(num);\n  };\n\n  return (\n    <div className=\"dashboard\" style={{ backgroundColor: theme.background, minHeight: 'calc(100vh - 70px)' }}>\n      <div className=\"dashboard__container\">\n        {/* Header Section */}\n        <div className=\"dashboard__header\">\n          <div>\n            <h1 style={{ color: theme.textPrimary }}>Good morning! 👋</h1>\n            <p style={{ color: theme.textSecondary }}>\n              Here's what's happening with your investments today.\n            </p>\n          </div>\n          <Link to=\"/market\" className=\"btn btn-primary\">\n            <ShowChartIcon />\n            Explore Markets\n          </Link>\n        </div>\n\n        {/* Portfolio Overview */}\n        <div className=\"portfolio__overview\">\n          <div className=\"portfolio__card main__card\" style={{ backgroundColor: theme.card, border: `1px solid ${theme.border}` }}>\n            <div className=\"portfolio__header\">\n              <div>\n                <h3 style={{ color: theme.textSecondary }}>Total Portfolio Value</h3>\n                <h2 style={{ color: theme.textPrimary }}>{formatCurrency(portfolioData.totalValue)}</h2>\n              </div>\n              <AccountBalanceWalletIcon style={{ color: theme.primary, fontSize: '3rem' }} />\n            </div>\n            \n            <div className=\"portfolio__metrics\">\n              <div className=\"metric\">\n                <span style={{ color: theme.textSecondary }}>Today's Change</span>\n                <div className={`metric__value ${portfolioData.todayChange >= 0 ? 'positive' : 'negative'}`}>\n                  {portfolioData.todayChange >= 0 ? <TrendingUpIcon /> : <TrendingDownIcon />}\n                  <span style={{ color: portfolioData.todayChange >= 0 ? theme.positive : theme.negative }}>\n                    {formatCurrency(Math.abs(portfolioData.todayChange))} ({portfolioData.todayChangePercent >= 0 ? '+' : ''}{portfolioData.todayChangePercent}%)\n                  </span>\n                </div>\n              </div>\n              \n              <div className=\"metric\">\n                <span style={{ color: theme.textSecondary }}>Total Return</span>\n                <div className={`metric__value ${portfolioData.totalReturn >= 0 ? 'positive' : 'negative'}`}>\n                  {portfolioData.totalReturn >= 0 ? <TrendingUpIcon /> : <TrendingDownIcon />}\n                  <span style={{ color: portfolioData.totalReturn >= 0 ? theme.positive : theme.negative }}>\n                    {formatCurrency(Math.abs(portfolioData.totalReturn))} (+{portfolioData.totalReturnPercent}%)\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"quick__stats\">\n            <div className=\"stat__card\" style={{ backgroundColor: theme.card, border: `1px solid ${theme.border}` }}>\n              <h4 style={{ color: theme.textSecondary }}>DSE Broad Index</h4>\n              <div className=\"stat__value\">\n                <span style={{ color: theme.textPrimary }}>{formatNumber(quickStats.dseIndex.value)}</span>\n                <span className={quickStats.dseIndex.change >= 0 ? 'positive' : 'negative'} style={{ color: quickStats.dseIndex.change >= 0 ? theme.positive : theme.negative }}>\n                  {quickStats.dseIndex.change >= 0 ? '+' : ''}{quickStats.dseIndex.change} ({quickStats.dseIndex.changePercent >= 0 ? '+' : ''}{quickStats.dseIndex.changePercent}%)\n                </span>\n              </div>\n            </div>\n\n            <div className=\"stat__card\" style={{ backgroundColor: theme.card, border: `1px solid ${theme.border}` }}>\n              <h4 style={{ color: theme.textSecondary }}>Gold (per gram)</h4>\n              <div className=\"stat__value\">\n                <span style={{ color: theme.textPrimary }}>৳{formatNumber(quickStats.goldPrice.value)}</span>\n                <span className={quickStats.goldPrice.change >= 0 ? 'positive' : 'negative'} style={{ color: quickStats.goldPrice.change >= 0 ? theme.positive : theme.negative }}>\n                  {quickStats.goldPrice.change >= 0 ? '+' : ''}৳{quickStats.goldPrice.change} ({quickStats.goldPrice.changePercent >= 0 ? '+' : ''}{quickStats.goldPrice.changePercent}%)\n                </span>\n              </div>\n            </div>\n\n            <div className=\"stat__card\" style={{ backgroundColor: theme.card, border: `1px solid ${theme.border}` }}>\n              <h4 style={{ color: theme.textSecondary }}>USD/BDT</h4>\n              <div className=\"stat__value\">\n                <span style={{ color: theme.textPrimary }}>৳{quickStats.usdRate.value}</span>\n                <span className={quickStats.usdRate.change >= 0 ? 'positive' : 'negative'} style={{ color: quickStats.usdRate.change >= 0 ? theme.positive : theme.negative }}>\n                  {quickStats.usdRate.change >= 0 ? '+' : ''}৳{quickStats.usdRate.change} ({quickStats.usdRate.changePercent >= 0 ? '+' : ''}{quickStats.usdRate.changePercent}%)\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"dashboard__content\">\n          {/* Holdings */}\n          <div className=\"section\">\n            <div className=\"section__header\">\n              <h3 style={{ color: theme.textPrimary }}>Your Holdings</h3>\n              <Link to=\"/portfolio\" style={{ color: theme.primary }}>View All</Link>\n            </div>\n            <div className=\"holdings__list\">\n              {holdings.slice(0, 4).map((holding, index) => {\n                const isStock = holding.category === 'stocks';\n                const isMutualFund = holding.category === 'mutualfunds';\n                const isGold = holding.category === 'gold';\n                \n                let currentPrice = 0;\n                let change = 0;\n                let name = holding.symbol;\n                \n                if (isStock) {\n                  const stockData = dseStocks.find(s => s.symbol === holding.symbol);\n                  if (stockData) {\n                    currentPrice = stockData.currentPrice;\n                    change = ((currentPrice - holding.avgPrice) / holding.avgPrice) * 100;\n                    name = stockData.name;\n                  }\n                } else if (isMutualFund) {\n                  const fundData = mutualFunds.find(f => f.symbol === holding.symbol);\n                  if (fundData) {\n                    currentPrice = fundData.nav;\n                    change = ((currentPrice - holding.avgPrice) / holding.avgPrice) * 100;\n                    name = fundData.name;\n                  }\n                } else if (isGold) {\n                  currentPrice = quickStats.goldPrice.value;\n                  change = ((currentPrice - holding.avgPrice) / holding.avgPrice) * 100;\n                  name = 'Digital Gold';\n                }\n                \n                const currentValue = isGold ? \n                  (holding.grams * currentPrice) : \n                  (holding.shares * currentPrice);\n\n                return (\n                  <Link\n                    key={index}\n                    to={`/instrument/${holding.category}/${holding.symbol}`}\n                    className=\"holding__item\"\n                    style={{ backgroundColor: theme.surface, border: `1px solid ${theme.border}` }}\n                  >\n                    <div className=\"holding__info\">\n                      <h4 style={{ color: theme.textPrimary }}>{holding.symbol}</h4>\n                      <p style={{ color: theme.textSecondary }}>\n                        {isGold ? `${holding.grams}g` : `${holding.shares} shares`}\n                      </p>\n                    </div>\n                    <div className=\"holding__value\">\n                      <span style={{ color: theme.textPrimary }}>{formatCurrency(currentValue)}</span>\n                      <span className={change >= 0 ? 'positive' : 'negative'} style={{ color: change >= 0 ? theme.positive : theme.negative }}>\n                        {change >= 0 ? '+' : ''}{change.toFixed(2)}%\n                      </span>\n                    </div>\n                  </Link>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Watchlist */}\n          <div className=\"section\">\n            <div className=\"section__header\">\n              <h3 style={{ color: theme.textPrimary }}>Watchlist</h3>\n              <Link to=\"/market\" style={{ color: theme.primary }}>Manage</Link>\n            </div>\n            <div className=\"watchlist__list\">\n              {getWatchlistData().map((stock, index) => (\n                <Link\n                  key={index}\n                  to={`/instrument/stocks/${stock.symbol}`}\n                  className=\"watchlist__item\"\n                  style={{ backgroundColor: theme.surface, border: `1px solid ${theme.border}` }}\n                >\n                  <div className=\"stock__info\">\n                    <h4 style={{ color: theme.textPrimary }}>{stock.symbol}</h4>\n                    <p style={{ color: theme.textSecondary }}>{stock.name}</p>\n                  </div>\n                  <div className=\"stock__price\">\n                    <span style={{ color: theme.textPrimary }}>৳{stock.currentPrice}</span>\n                    <span className={stock.change >= 0 ? 'positive' : 'negative'} style={{ color: stock.change >= 0 ? theme.positive : theme.negative }}>\n                      {stock.change >= 0 ? '+' : ''}৳{stock.change} ({stock.changePercent >= 0 ? '+' : ''}{stock.changePercent}%)\n                    </span>\n                  </div>\n                </Link>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Dashboard;","/home/user/webapp/src/components/market/MarketBrowse.js",["69"],"import React, { useState, useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useTheme } from '../../theme/ThemeContext';\nimport { dseStocks, mutualFunds, goldOptions, tBills, getAllInstruments } from '../../data/bangladeshMarket';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport TrendingDownIcon from '@material-ui/icons/TrendingDown';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport SortIcon from '@material-ui/icons/Sort';\nimport './MarketBrowse.css';\n\nfunction MarketBrowse() {\n  const { theme } = useTheme();\n  const [activeTab, setActiveTab] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [sortBy, setSortBy] = useState('name');\n  const [sortOrder, setSortOrder] = useState('asc');\n  const [selectedSector, setSelectedSector] = useState('all');\n\n  const tabs = [\n    { id: 'all', label: 'All Instruments', count: getAllInstruments().length },\n    { id: 'stocks', label: 'DSE Stocks', count: dseStocks.length },\n    { id: 'mutualfunds', label: 'Mutual Funds', count: mutualFunds.length },\n    { id: 'gold', label: 'Digital Gold', count: goldOptions.length },\n    { id: 'tbills', label: 'T-Bills', count: tBills.length }\n  ];\n\n  const sectors = [\n    'all', 'Banking', 'Pharmaceuticals', 'Telecommunications', \n    'Engineering', 'NBFI', 'Food & Allied'\n  ];\n\n  const sortOptions = [\n    { value: 'name', label: 'Name' },\n    { value: 'price', label: 'Price' },\n    { value: 'change', label: 'Change %' },\n    { value: 'volume', label: 'Volume' },\n    { value: 'marketcap', label: 'Market Cap' }\n  ];\n\n  const filteredAndSortedData = useMemo(() => {\n    let data = [];\n    \n    // Filter by tab\n    if (activeTab === 'all') {\n      data = getAllInstruments();\n    } else if (activeTab === 'stocks') {\n      data = dseStocks.map(stock => ({ ...stock, category: 'stocks' }));\n    } else if (activeTab === 'mutualfunds') {\n      data = mutualFunds.map(fund => ({ ...fund, category: 'mutualfunds' }));\n    } else if (activeTab === 'gold') {\n      data = goldOptions.map(gold => ({ ...gold, category: 'gold' }));\n    } else if (activeTab === 'tbills') {\n      data = tBills.map(tbill => ({ ...tbill, category: 'tbills' }));\n    }\n\n    // Filter by search query\n    if (searchQuery) {\n      data = data.filter(item => \n        item.symbol?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        item.name?.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n\n    // Filter by sector\n    if (selectedSector !== 'all') {\n      data = data.filter(item => item.sector === selectedSector);\n    }\n\n    // Sort data\n    data.sort((a, b) => {\n      let aValue, bValue;\n      \n      switch (sortBy) {\n        case 'name':\n          aValue = a.name || a.symbol || '';\n          bValue = b.name || b.symbol || '';\n          break;\n        case 'price':\n          aValue = a.currentPrice || a.nav || a.pricePerGram || a.interestRate || 0;\n          bValue = b.currentPrice || b.nav || b.pricePerGram || b.interestRate || 0;\n          break;\n        case 'change':\n          aValue = a.changePercent || 0;\n          bValue = b.changePercent || 0;\n          break;\n        case 'volume':\n          aValue = a.volume || 0;\n          bValue = b.volume || 0;\n          break;\n        case 'marketcap':\n          aValue = parseFloat((a.marketCap || '0').replace(/[^0-9.]/g, ''));\n          bValue = parseFloat((b.marketCap || '0').replace(/[^0-9.]/g, ''));\n          break;\n        default:\n          aValue = a.name || a.symbol || '';\n          bValue = b.name || b.symbol || '';\n      }\n\n      if (typeof aValue === 'string') {\n        return sortOrder === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n      }\n      \n      return sortOrder === 'asc' ? aValue - bValue : bValue - aValue;\n    });\n\n    return data;\n  }, [activeTab, searchQuery, selectedSector, sortBy, sortOrder]);\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('en-BD', {\n      style: 'currency',\n      currency: 'BDT',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2\n    }).format(amount);\n  };\n\n  const formatNumber = (num) => {\n    return new Intl.NumberFormat('en-BD').format(num);\n  };\n\n  const getPrice = (item) => {\n    if (item.currentPrice) return `৳${item.currentPrice}`;\n    if (item.nav) return `৳${item.nav}`;\n    if (item.pricePerGram) return `৳${item.pricePerGram}`;\n    if (item.interestRate) return `${item.interestRate}%`;\n    return '-';\n  };\n\n  const getChange = (item) => {\n    const change = item.change || 0;\n    const changePercent = item.changePercent || 0;\n    \n    if (item.category === 'tbills') {\n      return { value: `${item.currentYield || item.interestRate}%`, isPositive: true };\n    }\n    \n    return {\n      value: `${change >= 0 ? '+' : ''}${change} (${changePercent >= 0 ? '+' : ''}${changePercent}%)`,\n      isPositive: change >= 0\n    };\n  };\n\n  const getSubtitle = (item) => {\n    if (item.sector) return item.sector;\n    if (item.category === 'mutualfunds') return item.category;\n    if (item.category === 'gold') return item.type;\n    if (item.category === 'tbills') return `${item.tenure} days`;\n    return item.category;\n  };\n\n  return (\n    <div className=\"market-browse\" style={{ backgroundColor: theme.background, minHeight: 'calc(100vh - 70px)' }}>\n      <div className=\"market__container\">\n        {/* Header */}\n        <div className=\"market__header\">\n          <div>\n            <h1 style={{ color: theme.textPrimary }}>Market Overview</h1>\n            <p style={{ color: theme.textSecondary }}>\n              Explore and invest in Bangladesh's financial instruments\n            </p>\n          </div>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"market__controls\">\n          <div className=\"search__section\">\n            <div className=\"search__container\" style={{ backgroundColor: theme.card, border: `1px solid ${theme.border}` }}>\n              <SearchIcon style={{ color: theme.textSecondary }} />\n              <input\n                type=\"text\"\n                placeholder=\"Search instruments...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"search__input\"\n                style={{ color: theme.textPrimary }}\n              />\n            </div>\n          </div>\n\n          <div className=\"filters__section\">\n            <div className=\"filter__group\">\n              <FilterListIcon style={{ color: theme.textSecondary }} />\n              <select\n                value={selectedSector}\n                onChange={(e) => setSelectedSector(e.target.value)}\n                className=\"filter__select\"\n                style={{ backgroundColor: theme.card, color: theme.textPrimary, border: `1px solid ${theme.border}` }}\n              >\n                {sectors.map(sector => (\n                  <option key={sector} value={sector}>\n                    {sector === 'all' ? 'All Sectors' : sector}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"filter__group\">\n              <SortIcon style={{ color: theme.textSecondary }} />\n              <select\n                value={`${sortBy}-${sortOrder}`}\n                onChange={(e) => {\n                  const [newSortBy, newSortOrder] = e.target.value.split('-');\n                  setSortBy(newSortBy);\n                  setSortOrder(newSortOrder);\n                }}\n                className=\"filter__select\"\n                style={{ backgroundColor: theme.card, color: theme.textPrimary, border: `1px solid ${theme.border}` }}\n              >\n                {sortOptions.map(option => (\n                  <React.Fragment key={option.value}>\n                    <option value={`${option.value}-asc`}>{option.label} ↑</option>\n                    <option value={`${option.value}-desc`}>{option.label} ↓</option>\n                  </React.Fragment>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n\n        {/* Tabs */}\n        <div className=\"market__tabs\">\n          {tabs.map(tab => (\n            <button\n              key={tab.id}\n              className={`tab__button ${activeTab === tab.id ? 'tab__button--active' : ''}`}\n              onClick={() => setActiveTab(tab.id)}\n              style={{\n                color: activeTab === tab.id ? theme.primary : theme.textSecondary,\n                borderBottom: activeTab === tab.id ? `2px solid ${theme.primary}` : 'none',\n                backgroundColor: activeTab === tab.id ? `${theme.primary}10` : 'transparent'\n              }}\n            >\n              <span>{tab.label}</span>\n              <span className=\"tab__count\">{tab.count}</span>\n            </button>\n          ))}\n        </div>\n\n        {/* Results */}\n        <div className=\"market__results\">\n          <div className=\"results__header\">\n            <span style={{ color: theme.textSecondary }}>\n              Showing {filteredAndSortedData.length} instruments\n            </span>\n          </div>\n\n          <div className=\"instruments__grid\">\n            {filteredAndSortedData.map((item, index) => {\n              const change = getChange(item);\n              \n              return (\n                <Link\n                  key={`${item.category}-${item.symbol}-${index}`}\n                  to={`/instrument/${item.category}/${item.symbol}`}\n                  className=\"instrument__card\"\n                  style={{ backgroundColor: theme.card, border: `1px solid ${theme.border}` }}\n                >\n                  <div className=\"instrument__header\">\n                    <div className=\"instrument__info\">\n                      <h3 style={{ color: theme.textPrimary }}>{item.symbol}</h3>\n                      <p style={{ color: theme.textSecondary }}>{getSubtitle(item)}</p>\n                    </div>\n                    <div className=\"instrument__category\" style={{ backgroundColor: `${theme.primary}20`, color: theme.primary }}>\n                      {item.category}\n                    </div>\n                  </div>\n\n                  <div className=\"instrument__name\" style={{ color: theme.textSecondary }}>\n                    {item.name}\n                  </div>\n\n                  <div className=\"instrument__metrics\">\n                    <div className=\"metric\">\n                      <span className=\"metric__label\" style={{ color: theme.textSecondary }}>Price</span>\n                      <span className=\"metric__value\" style={{ color: theme.textPrimary }}>\n                        {getPrice(item)}\n                      </span>\n                    </div>\n                    \n                    <div className=\"metric\">\n                      <span className=\"metric__label\" style={{ color: theme.textSecondary }}>\n                        {item.category === 'tbills' ? 'Yield' : 'Change'}\n                      </span>\n                      <div className={`metric__change ${change.isPositive ? 'positive' : 'negative'}`}>\n                        {change.isPositive ? <TrendingUpIcon /> : <TrendingDownIcon />}\n                        <span style={{ color: change.isPositive ? theme.positive : theme.negative }}>\n                          {change.value}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {item.volume && (\n                    <div className=\"instrument__volume\" style={{ color: theme.textSecondary }}>\n                      Volume: {formatNumber(item.volume)}\n                    </div>\n                  )}\n                </Link>\n              );\n            })}\n          </div>\n\n          {filteredAndSortedData.length === 0 && (\n            <div className=\"no__results\" style={{ color: theme.textSecondary }}>\n              <p>No instruments found matching your criteria.</p>\n              <button \n                onClick={() => {\n                  setSearchQuery('');\n                  setSelectedSector('all');\n                  setActiveTab('all');\n                }}\n                className=\"btn btn-outline\"\n              >\n                Clear Filters\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MarketBrowse;","/home/user/webapp/src/components/instrument/InstrumentDetails.js",["70"],"import React, { useState, useEffect } from 'react';\nimport { useParams, Link, useHistory } from 'react-router-dom';\nimport { useTheme } from '../../theme/ThemeContext';\nimport { dseStocks, mutualFunds, goldOptions, tBills } from '../../data/bangladeshMarket';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport TrendingDownIcon from '@material-ui/icons/TrendingDown';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\nimport AccountBalanceIcon from '@material-ui/icons/AccountBalance';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport './InstrumentDetails.css';\n\nfunction InstrumentDetails() {\n  const { category, symbol } = useParams();\n  const history = useHistory();\n  const { theme } = useTheme();\n  const [instrument, setInstrument] = useState(null);\n  const [isWatchlisted, setIsWatchlisted] = useState(false);\n  const [chartPeriod, setChartPeriod] = useState('1D');\n\n  useEffect(() => {\n    let foundInstrument = null;\n    \n    switch (category) {\n      case 'stocks':\n        foundInstrument = dseStocks.find(stock => stock.symbol === symbol);\n        break;\n      case 'mutualfunds':\n        foundInstrument = mutualFunds.find(fund => fund.symbol === symbol);\n        break;\n      case 'gold':\n        foundInstrument = goldOptions.find(gold => gold.symbol === symbol);\n        break;\n      case 'tbills':\n        foundInstrument = tBills.find(tbill => tbill.symbol === symbol);\n        break;\n      default:\n        break;\n    }\n\n    if (foundInstrument) {\n      setInstrument({ ...foundInstrument, category });\n    }\n\n    // Check if in watchlist (demo implementation)\n    const watchlist = JSON.parse(localStorage.getItem('kosh-watchlist') || '[]');\n    setIsWatchlisted(watchlist.includes(symbol));\n  }, [category, symbol]);\n\n  const toggleWatchlist = () => {\n    const watchlist = JSON.parse(localStorage.getItem('kosh-watchlist') || '[]');\n    let newWatchlist;\n    \n    if (isWatchlisted) {\n      newWatchlist = watchlist.filter(item => item !== symbol);\n    } else {\n      newWatchlist = [...watchlist, symbol];\n    }\n    \n    localStorage.setItem('kosh-watchlist', JSON.stringify(newWatchlist));\n    setIsWatchlisted(!isWatchlisted);\n  };\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('en-BD', {\n      style: 'currency',\n      currency: 'BDT',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2\n    }).format(amount);\n  };\n\n  const formatNumber = (num) => {\n    return new Intl.NumberFormat('en-BD').format(num);\n  };\n\n  const getPrice = () => {\n    if (instrument.currentPrice) return `৳${instrument.currentPrice}`;\n    if (instrument.nav) return `৳${instrument.nav}`;\n    if (instrument.pricePerGram) return `৳${instrument.pricePerGram}`;\n    if (instrument.interestRate) return `${instrument.interestRate}%`;\n    return '-';\n  };\n\n  const getChange = () => {\n    const change = instrument.change || 0;\n    const changePercent = instrument.changePercent || 0;\n    \n    if (instrument.category === 'tbills') {\n      return { value: `Yield: ${instrument.currentYield || instrument.interestRate}%`, isPositive: true };\n    }\n    \n    return {\n      value: `${change >= 0 ? '+' : ''}৳${Math.abs(change)} (${changePercent >= 0 ? '+' : ''}${changePercent}%)`,\n      isPositive: change >= 0\n    };\n  };\n\n  const renderStockDetails = () => (\n    <div className=\"details__grid\">\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>Market Cap</span>\n        <span style={{ color: theme.textPrimary }}>৳{instrument.marketCap}</span>\n      </div>\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>Volume</span>\n        <span style={{ color: theme.textPrimary }}>{formatNumber(instrument.volume)}</span>\n      </div>\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>Day High</span>\n        <span style={{ color: theme.textPrimary }}>৳{instrument.high}</span>\n      </div>\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>Day Low</span>\n        <span style={{ color: theme.textPrimary }}>৳{instrument.low}</span>\n      </div>\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>Sector</span>\n        <span style={{ color: theme.textPrimary }}>{instrument.sector}</span>\n      </div>\n    </div>\n  );\n\n  const renderMutualFundDetails = () => (\n    <div className=\"details__grid\">\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>AUM</span>\n        <span style={{ color: theme.textPrimary }}>৳{instrument.aum}</span>\n      </div>\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>Fund Manager</span>\n        <span style={{ color: theme.textPrimary }}>{instrument.fundManager}</span>\n      </div>\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>Category</span>\n        <span style={{ color: theme.textPrimary }}>{instrument.category}</span>\n      </div>\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>Inception Date</span>\n        <span style={{ color: theme.textPrimary }}>{instrument.inceptionDate}</span>\n      </div>\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>Min Investment</span>\n        <span style={{ color: theme.textPrimary }}>৳{formatNumber(instrument.minInvestment)}</span>\n      </div>\n    </div>\n  );\n\n  const renderGoldDetails = () => (\n    <div className=\"details__grid\">\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>Purity</span>\n        <span style={{ color: theme.textPrimary }}>{instrument.purity}</span>\n      </div>\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>Min Investment</span>\n        <span style={{ color: theme.textPrimary }}>৳{instrument.minInvestment}</span>\n      </div>\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>Type</span>\n        <span style={{ color: theme.textPrimary }}>{instrument.type}</span>\n      </div>\n    </div>\n  );\n\n  const renderTBillDetails = () => (\n    <div className=\"details__grid\">\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>Tenure</span>\n        <span style={{ color: theme.textPrimary }}>{instrument.tenure} days</span>\n      </div>\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>Interest Rate</span>\n        <span style={{ color: theme.textPrimary }}>{instrument.interestRate}%</span>\n      </div>\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>Current Yield</span>\n        <span style={{ color: theme.textPrimary }}>{instrument.currentYield}%</span>\n      </div>\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>Maturity Date</span>\n        <span style={{ color: theme.textPrimary }}>{instrument.maturityDate}</span>\n      </div>\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>Min Investment</span>\n        <span style={{ color: theme.textPrimary }}>৳{formatNumber(instrument.minInvestment)}</span>\n      </div>\n      <div className=\"detail__item\">\n        <span style={{ color: theme.textSecondary }}>Issuer</span>\n        <span style={{ color: theme.textPrimary }}>{instrument.issuer}</span>\n      </div>\n    </div>\n  );\n\n  if (!instrument) {\n    return (\n      <div className=\"instrument-details\" style={{ backgroundColor: theme.background, minHeight: 'calc(100vh - 70px)' }}>\n        <div className=\"loading__container\">\n          <div className=\"loading\" />\n          <p style={{ color: theme.textSecondary }}>Loading instrument details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const change = getChange();\n  const chartPeriods = ['1D', '1W', '1M', '3M', '1Y', 'ALL'];\n\n  return (\n    <div className=\"instrument-details\" style={{ backgroundColor: theme.background, minHeight: 'calc(100vh - 70px)' }}>\n      <div className=\"instrument__container\">\n        {/* Header */}\n        <div className=\"instrument__header\">\n          <button \n            onClick={() => history.goBack()}\n            className=\"back__button\"\n            style={{ color: theme.textSecondary }}\n          >\n            <ArrowBackIcon />\n          </button>\n          \n          <div className=\"instrument__info\">\n            <div className=\"title__section\">\n              <h1 style={{ color: theme.textPrimary }}>{instrument.symbol}</h1>\n              <button\n                onClick={toggleWatchlist}\n                className=\"watchlist__button\"\n                style={{ color: isWatchlisted ? theme.warning : theme.textSecondary }}\n              >\n                {isWatchlisted ? <StarIcon /> : <StarBorderIcon />}\n              </button>\n            </div>\n            <p style={{ color: theme.textSecondary }}>{instrument.name}</p>\n            \n            <div className=\"price__section\">\n              <h2 style={{ color: theme.textPrimary }}>{getPrice()}</h2>\n              <div className={`change__indicator ${change.isPositive ? 'positive' : 'negative'}`}>\n                {change.isPositive ? <TrendingUpIcon /> : <TrendingDownIcon />}\n                <span style={{ color: change.isPositive ? theme.positive : theme.negative }}>\n                  {change.value}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"instrument__content\">\n          {/* Chart Section */}\n          <div className=\"chart__section\" style={{ backgroundColor: theme.card, border: `1px solid ${theme.border}` }}>\n            <div className=\"chart__header\">\n              <h3 style={{ color: theme.textPrimary }}>Price Chart</h3>\n              <div className=\"chart__periods\">\n                {chartPeriods.map(period => (\n                  <button\n                    key={period}\n                    className={`period__button ${chartPeriod === period ? 'period__button--active' : ''}`}\n                    onClick={() => setChartPeriod(period)}\n                    style={{\n                      color: chartPeriod === period ? theme.primary : theme.textSecondary,\n                      backgroundColor: chartPeriod === period ? `${theme.primary}20` : 'transparent'\n                    }}\n                  >\n                    {period}\n                  </button>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"chart__placeholder\" style={{ backgroundColor: theme.background, border: `1px solid ${theme.border}` }}>\n              <ShowChartIcon style={{ fontSize: '4rem', color: theme.textMuted }} />\n              <p style={{ color: theme.textMuted }}>Chart visualization would be implemented here</p>\n              <p style={{ color: theme.textSecondary }}>Showing {chartPeriod} performance for {instrument.symbol}</p>\n            </div>\n          </div>\n\n          {/* Details Section */}\n          <div className=\"details__section\" style={{ backgroundColor: theme.card, border: `1px solid ${theme.border}` }}>\n            <h3 style={{ color: theme.textPrimary }}>Details</h3>\n            \n            {instrument.category === 'stocks' && renderStockDetails()}\n            {instrument.category === 'mutualfunds' && renderMutualFundDetails()}\n            {instrument.category === 'gold' && renderGoldDetails()}\n            {instrument.category === 'tbills' && renderTBillDetails()}\n            \n            {instrument.description && (\n              <div className=\"description__section\">\n                <h4 style={{ color: theme.textPrimary }}>About</h4>\n                <p style={{ color: theme.textSecondary }}>{instrument.description}</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"action__buttons\">\n          <Link\n            to={`/order/${category}/${symbol}/buy`}\n            className=\"btn btn-primary action__button\"\n          >\n            <AccountBalanceIcon />\n            Buy {instrument.category === 'stocks' ? 'Shares' : \n                 instrument.category === 'mutualfunds' ? 'Units' :\n                 instrument.category === 'gold' ? 'Gold' : 'T-Bill'}\n          </Link>\n          \n          <Link\n            to={`/order/${category}/${symbol}/sell`}\n            className=\"btn btn-secondary action__button\"\n          >\n            Sell\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default InstrumentDetails;","/home/user/webapp/src/components/order/OrderScreen.js",["71","72"],"import React, { useState, useEffect } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { useTheme } from '../../theme/ThemeContext';\nimport { dseStocks, mutualFunds, goldOptions, tBills } from '../../data/bangladeshMarket';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport TrendingDownIcon from '@material-ui/icons/TrendingDown';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport { v4 as uuidv4 } from 'uuid';\nimport './OrderScreen.css';\n\nfunction OrderScreen() {\n  const { category, symbol, action } = useParams();\n  const history = useHistory();\n  const { theme } = useTheme();\n  \n  const [instrument, setInstrument] = useState(null);\n  const [orderType, setOrderType] = useState('market');\n  const [quantity, setQuantity] = useState('');\n  const [price, setPrice] = useState('');\n  const [amount, setAmount] = useState('');\n  const [orderSubmitted, setOrderSubmitted] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({});\n\n  // Mock user portfolio data\n  const [userBalance] = useState(50000); // BDT 50,000\n  const [userHoldings] = useState({\n    'SQURPHAR': { shares: 100, avgPrice: 150.30 },\n    'GRAMEENPHONE': { shares: 50, avgPrice: 280.50 },\n    'BRACMF': { shares: 500, avgPrice: 13.80 },\n    'GOLD_1G': { grams: 10, avgPrice: 7800 }\n  });\n\n  useEffect(() => {\n    let foundInstrument = null;\n    \n    switch (category) {\n      case 'stocks':\n        foundInstrument = dseStocks.find(stock => stock.symbol === symbol);\n        break;\n      case 'mutualfunds':\n        foundInstrument = mutualFunds.find(fund => fund.symbol === symbol);\n        break;\n      case 'gold':\n        foundInstrument = goldOptions.find(gold => gold.symbol === symbol);\n        break;\n      case 'tbills':\n        foundInstrument = tBills.find(tbill => tbill.symbol === symbol);\n        break;\n      default:\n        break;\n    }\n\n    if (foundInstrument) {\n      setInstrument({ ...foundInstrument, category });\n      // Set initial price for limit orders\n      const currentPrice = foundInstrument.currentPrice || foundInstrument.nav || foundInstrument.pricePerGram || foundInstrument.interestRate;\n      setPrice(currentPrice?.toString() || '');\n    }\n  }, [category, symbol]);\n\n  const getCurrentPrice = () => {\n    if (!instrument) return 0;\n    return instrument.currentPrice || instrument.nav || instrument.pricePerGram || instrument.interestRate || 0;\n  };\n\n  const getMinInvestment = () => {\n    if (!instrument) return 0;\n    return instrument.minInvestment || (category === 'stocks' ? 1 : 100);\n  };\n\n  const calculateTotal = () => {\n    if (orderType === 'market') {\n      const unitPrice = getCurrentPrice();\n      const qty = parseFloat(quantity) || 0;\n      return unitPrice * qty;\n    } else {\n      const unitPrice = parseFloat(price) || 0;\n      const qty = parseFloat(quantity) || 0;\n      return unitPrice * qty;\n    }\n  };\n\n  const validateOrder = () => {\n    const newErrors = {};\n    \n    if (!quantity || parseFloat(quantity) <= 0) {\n      newErrors.quantity = 'Please enter a valid quantity';\n    }\n    \n    if (orderType === 'limit' && (!price || parseFloat(price) <= 0)) {\n      newErrors.price = 'Please enter a valid price';\n    }\n    \n    const total = calculateTotal();\n    const minInvestment = getMinInvestment();\n    \n    if (total < minInvestment) {\n      newErrors.amount = `Minimum investment is ৳${minInvestment}`;\n    }\n    \n    if (action === 'buy' && total > userBalance) {\n      newErrors.amount = 'Insufficient balance';\n    }\n    \n    if (action === 'sell') {\n      const holdings = userHoldings[symbol];\n      if (!holdings) {\n        newErrors.quantity = 'You do not own this instrument';\n      } else {\n        const availableQty = holdings.shares || holdings.grams || 0;\n        if (parseFloat(quantity) > availableQty) {\n          newErrors.quantity = `You only own ${availableQty} ${category === 'gold' ? 'grams' : 'units'}`;\n        }\n      }\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmitOrder = async (e) => {\n    e.preventDefault();\n    \n    if (!validateOrder()) return;\n    \n    setLoading(true);\n    \n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    // Create order object (would be sent to backend)\n    const order = {\n      id: uuidv4(),\n      symbol,\n      category,\n      action,\n      type: orderType,\n      quantity: parseFloat(quantity),\n      price: orderType === 'market' ? getCurrentPrice() : parseFloat(price),\n      total: calculateTotal(),\n      timestamp: new Date().toISOString(),\n      status: 'pending'\n    };\n    \n    // Save to localStorage (demo implementation)\n    const existingOrders = JSON.parse(localStorage.getItem('kosh-orders') || '[]');\n    existingOrders.push(order);\n    localStorage.setItem('kosh-orders', JSON.stringify(existingOrders));\n    \n    setLoading(false);\n    setOrderSubmitted(true);\n  };\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('en-BD', {\n      style: 'currency',\n      currency: 'BDT',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2\n    }).format(amount);\n  };\n\n  const getUnitLabel = () => {\n    switch (category) {\n      case 'stocks': return 'shares';\n      case 'mutualfunds': return 'units';\n      case 'gold': return 'grams';\n      case 'tbills': return 'amount (৳)';\n      default: return 'units';\n    }\n  };\n\n  const getChange = () => {\n    if (!instrument) return { value: '', isPositive: true };\n    \n    const change = instrument.change || 0;\n    const changePercent = instrument.changePercent || 0;\n    \n    if (instrument.category === 'tbills') {\n      return { value: `Yield: ${instrument.currentYield || instrument.interestRate}%`, isPositive: true };\n    }\n    \n    return {\n      value: `${change >= 0 ? '+' : ''}৳${Math.abs(change)} (${changePercent >= 0 ? '+' : ''}${changePercent}%)`,\n      isPositive: change >= 0\n    };\n  };\n\n  if (orderSubmitted) {\n    return (\n      <div className=\"order-screen\" style={{ backgroundColor: theme.background, minHeight: 'calc(100vh - 70px)' }}>\n        <div className=\"order__container\">\n          <div className=\"success__message\" style={{ backgroundColor: theme.card, border: `1px solid ${theme.border}` }}>\n            <CheckCircleIcon style={{ color: theme.success, fontSize: '4rem' }} />\n            <h2 style={{ color: theme.textPrimary }}>Order Submitted!</h2>\n            <p style={{ color: theme.textSecondary }}>\n              Your {action} order for {quantity} {getUnitLabel()} of {symbol} has been submitted successfully.\n            </p>\n            <div className=\"order__summary\" style={{ backgroundColor: theme.surface, border: `1px solid ${theme.border}` }}>\n              <div className=\"summary__item\">\n                <span style={{ color: theme.textSecondary }}>Order Type</span>\n                <span style={{ color: theme.textPrimary }}>{orderType.charAt(0).toUpperCase() + orderType.slice(1)} {action.charAt(0).toUpperCase() + action.slice(1)}</span>\n              </div>\n              <div className=\"summary__item\">\n                <span style={{ color: theme.textSecondary }}>Quantity</span>\n                <span style={{ color: theme.textPrimary }}>{quantity} {getUnitLabel()}</span>\n              </div>\n              <div className=\"summary__item\">\n                <span style={{ color: theme.textSecondary }}>Price per unit</span>\n                <span style={{ color: theme.textPrimary }}>৳{orderType === 'market' ? getCurrentPrice() : price}</span>\n              </div>\n              <div className=\"summary__item total\">\n                <span style={{ color: theme.textSecondary }}>Total Amount</span>\n                <span style={{ color: theme.textPrimary, fontWeight: 600, fontSize: '1.1rem' }}>{formatCurrency(calculateTotal())}</span>\n              </div>\n            </div>\n            <div className=\"action__buttons\">\n              <button onClick={() => history.push('/portfolio')} className=\"btn btn-primary\">\n                View Portfolio\n              </button>\n              <button onClick={() => history.push('/market')} className=\"btn btn-outline\">\n                Continue Trading\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!instrument) {\n    return (\n      <div className=\"order-screen\" style={{ backgroundColor: theme.background, minHeight: 'calc(100vh - 70px)' }}>\n        <div className=\"loading__container\">\n          <div className=\"loading\" />\n          <p style={{ color: theme.textSecondary }}>Loading order details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const change = getChange();\n  const total = calculateTotal();\n\n  return (\n    <div className=\"order-screen\" style={{ backgroundColor: theme.background, minHeight: 'calc(100vh - 70px)' }}>\n      <div className=\"order__container\">\n        {/* Header */}\n        <div className=\"order__header\">\n          <button \n            onClick={() => history.goBack()}\n            className=\"back__button\"\n            style={{ color: theme.textSecondary }}\n          >\n            <ArrowBackIcon />\n          </button>\n          \n          <div className=\"order__info\">\n            <h1 style={{ color: theme.textPrimary }}>\n              {action.charAt(0).toUpperCase() + action.slice(1)} {instrument.symbol}\n            </h1>\n            <p style={{ color: theme.textSecondary }}>{instrument.name}</p>\n            \n            <div className=\"price__display\">\n              <span style={{ color: theme.textPrimary, fontSize: '1.5rem', fontWeight: '600' }}>\n                ৳{getCurrentPrice()}\n              </span>\n              <div className={`change__indicator ${change.isPositive ? 'positive' : 'negative'}`}>\n                {change.isPositive ? <TrendingUpIcon /> : <TrendingDownIcon />}\n                <span style={{ color: change.isPositive ? theme.positive : theme.negative }}>\n                  {change.value}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"order__content\">\n          {/* Order Form */}\n          <div className=\"order__form__container\" style={{ backgroundColor: theme.card, border: `1px solid ${theme.border}` }}>\n            <h3 style={{ color: theme.textPrimary }}>Order Details</h3>\n            \n            <form onSubmit={handleSubmitOrder} className=\"order__form\">\n              {/* Order Type */}\n              <div className=\"form__group\">\n                <label style={{ color: theme.textPrimary }}>Order Type</label>\n                <div className=\"radio__group\">\n                  <label className=\"radio__label\">\n                    <input\n                      type=\"radio\"\n                      value=\"market\"\n                      checked={orderType === 'market'}\n                      onChange={(e) => setOrderType(e.target.value)}\n                    />\n                    <span style={{ color: theme.textPrimary }}>Market Order</span>\n                    <small style={{ color: theme.textSecondary }}>Execute at current market price</small>\n                  </label>\n                  <label className=\"radio__label\">\n                    <input\n                      type=\"radio\"\n                      value=\"limit\"\n                      checked={orderType === 'limit'}\n                      onChange={(e) => setOrderType(e.target.value)}\n                    />\n                    <span style={{ color: theme.textPrimary }}>Limit Order</span>\n                    <small style={{ color: theme.textSecondary }}>Execute at specified price or better</small>\n                  </label>\n                </div>\n              </div>\n\n              {/* Quantity */}\n              <div className=\"form__group\">\n                <label style={{ color: theme.textPrimary }}>\n                  Quantity ({getUnitLabel()})\n                </label>\n                <input\n                  type=\"number\"\n                  value={quantity}\n                  onChange={(e) => setQuantity(e.target.value)}\n                  className={`input ${errors.quantity ? 'input--error' : ''}`}\n                  placeholder={`Enter number of ${getUnitLabel()}`}\n                  min=\"0.001\"\n                  step={category === 'gold' ? '0.001' : '1'}\n                />\n                {errors.quantity && <span className=\"error__text\" style={{ color: theme.error }}>{errors.quantity}</span>}\n              </div>\n\n              {/* Price (for limit orders) */}\n              {orderType === 'limit' && (\n                <div className=\"form__group\">\n                  <label style={{ color: theme.textPrimary }}>Price per {category === 'gold' ? 'gram' : 'unit'} (৳)</label>\n                  <input\n                    type=\"number\"\n                    value={price}\n                    onChange={(e) => setPrice(e.target.value)}\n                    className={`input ${errors.price ? 'input--error' : ''}`}\n                    placeholder=\"Enter price\"\n                    min=\"0.01\"\n                    step=\"0.01\"\n                  />\n                  {errors.price && <span className=\"error__text\" style={{ color: theme.error }}>{errors.price}</span>}\n                </div>\n              )}\n\n              {/* Total Amount */}\n              <div className=\"total__section\">\n                <div className=\"total__display\" style={{ backgroundColor: theme.surface, border: `1px solid ${theme.border}` }}>\n                  <span style={{ color: theme.textSecondary }}>Total Amount</span>\n                  <span style={{ color: theme.textPrimary, fontSize: '1.5rem', fontWeight: '600' }}>\n                    {formatCurrency(total)}\n                  </span>\n                </div>\n                {errors.amount && <span className=\"error__text\" style={{ color: theme.error }}>{errors.amount}</span>}\n              </div>\n\n              {/* Submit Button */}\n              <button\n                type=\"submit\"\n                disabled={loading}\n                className={`btn ${action === 'buy' ? 'btn-primary' : 'btn-secondary'} submit__button`}\n              >\n                {loading ? (\n                  <>\n                    <div className=\"loading\" />\n                    Processing...\n                  </>\n                ) : (\n                  <>\n                    <AccountBalanceWalletIcon />\n                    {action === 'buy' ? 'Place Buy Order' : 'Place Sell Order'}\n                  </>\n                )}\n              </button>\n            </form>\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"summary__container\" style={{ backgroundColor: theme.card, border: `1px solid ${theme.border}` }}>\n            <h3 style={{ color: theme.textPrimary }}>Account Summary</h3>\n            \n            <div className=\"account__info\">\n              <div className=\"info__item\">\n                <span style={{ color: theme.textSecondary }}>Available Balance</span>\n                <span style={{ color: theme.textPrimary }}>{formatCurrency(userBalance)}</span>\n              </div>\n              \n              {action === 'sell' && userHoldings[symbol] && (\n                <div className=\"info__item\">\n                  <span style={{ color: theme.textSecondary }}>Current Holdings</span>\n                  <span style={{ color: theme.textPrimary }}>\n                    {userHoldings[symbol].shares || userHoldings[symbol].grams} {getUnitLabel()}\n                  </span>\n                </div>\n              )}\n              \n              <div className=\"info__item\">\n                <span style={{ color: theme.textSecondary }}>After Order</span>\n                <span style={{ color: action === 'buy' ? theme.error : theme.success }}>\n                  {action === 'buy' \n                    ? formatCurrency(userBalance - total)\n                    : formatCurrency(userBalance + total)\n                  }\n                </span>\n              </div>\n            </div>\n\n            <div className=\"market__info\" style={{ marginTop: '24px', paddingTop: '24px', borderTop: `1px solid ${theme.border}` }}>\n              <h4 style={{ color: theme.textPrimary }}>Market Information</h4>\n              <div className=\"info__item\">\n                <span style={{ color: theme.textSecondary }}>Market Status</span>\n                <span style={{ color: theme.success }}>Open</span>\n              </div>\n              <div className=\"info__item\">\n                <span style={{ color: theme.textSecondary }}>Trading Hours</span>\n                <span style={{ color: theme.textPrimary }}>10:30 AM - 2:30 PM</span>\n              </div>\n              {category === 'stocks' && (\n                <div className=\"info__item\">\n                  <span style={{ color: theme.textSecondary }}>Day Range</span>\n                  <span style={{ color: theme.textPrimary }}>৳{instrument.low} - ৳{instrument.high}</span>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default OrderScreen;","/home/user/webapp/src/components/portfolio/Portfolio.js",["73"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useTheme } from '../../theme/ThemeContext';\nimport { dseStocks, mutualFunds } from '../../data/bangladeshMarket';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport TrendingDownIcon from '@material-ui/icons/TrendingDown';\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\nimport HistoryIcon from '@material-ui/icons/History';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport './Portfolio.css';\n\nfunction Portfolio() {\n  const { theme } = useTheme();\n  const [activeTab, setActiveTab] = useState('holdings');\n  const [filterCategory, setFilterCategory] = useState('all');\n\n  // Mock portfolio data\n  const [portfolioSummary] = useState({\n    totalValue: 125000,\n    totalInvested: 110000,\n    totalReturn: 15000,\n    totalReturnPercent: 13.64,\n    dayChange: 2450,\n    dayChangePercent: 2.00\n  });\n\n  const [holdings] = useState([\n    { \n      symbol: 'SQURPHAR', \n      category: 'stocks',\n      shares: 50, \n      avgPrice: 154.50, \n      currentPrice: 156.80,\n      investedAmount: 7725,\n      currentValue: 7840,\n      dayChange: 115,\n      totalReturn: 115\n    },\n    { \n      symbol: 'GRAMEENPHONE', \n      category: 'stocks',\n      shares: 25, \n      avgPrice: 292.70, \n      currentPrice: 298.50,\n      investedAmount: 7317.50,\n      currentValue: 7462.50,\n      dayChange: 145,\n      totalReturn: 145\n    },\n    { \n      symbol: 'BRACBANK', \n      category: 'stocks',\n      shares: 100, \n      avgPrice: 45.20, \n      currentPrice: 44.70,\n      investedAmount: 4520,\n      currentValue: 4470,\n      dayChange: -50,\n      totalReturn: -50\n    },\n    { \n      symbol: 'BRACMF', \n      category: 'mutualfunds',\n      shares: 1000, \n      avgPrice: 14.35, \n      currentPrice: 14.60,\n      investedAmount: 14350,\n      currentValue: 14600,\n      dayChange: 250,\n      totalReturn: 250\n    },\n    { \n      symbol: 'AIBLMF1', \n      category: 'mutualfunds',\n      shares: 500, \n      avgPrice: 12.70, \n      currentPrice: 12.85,\n      investedAmount: 6350,\n      currentValue: 6425,\n      dayChange: 75,\n      totalReturn: 75\n    },\n    { \n      symbol: 'GOLD_1G', \n      category: 'gold',\n      grams: 15.5, \n      avgPrice: 7825.00, \n      currentPrice: 7850.00,\n      investedAmount: 121287.50,\n      currentValue: 121675,\n      dayChange: 387.50,\n      totalReturn: 387.50\n    }\n  ]);\n\n  const [orders] = useState([\n    {\n      id: 'order-001',\n      symbol: 'SQURPHAR',\n      category: 'stocks',\n      action: 'buy',\n      type: 'market',\n      quantity: 25,\n      price: 156.80,\n      total: 3920,\n      status: 'completed',\n      timestamp: '2024-09-05T10:30:00Z'\n    },\n    {\n      id: 'order-002',\n      symbol: 'BRACMF',\n      category: 'mutualfunds',\n      action: 'buy',\n      type: 'limit',\n      quantity: 500,\n      price: 14.60,\n      total: 7300,\n      status: 'pending',\n      timestamp: '2024-09-05T11:15:00Z'\n    },\n    {\n      id: 'order-003',\n      symbol: 'GRAMEENPHONE',\n      category: 'stocks',\n      action: 'sell',\n      type: 'market',\n      quantity: 10,\n      price: 298.50,\n      total: 2985,\n      status: 'completed',\n      timestamp: '2024-09-04T14:20:00Z'\n    }\n  ]);\n\n  const tabs = [\n    { id: 'holdings', label: 'Holdings', count: holdings.length },\n    { id: 'orders', label: 'Orders', count: orders.length }\n  ];\n\n  const categories = ['all', 'stocks', 'mutualfunds', 'gold', 'tbills'];\n\n  const filteredHoldings = holdings.filter(holding => \n    filterCategory === 'all' || holding.category === filterCategory\n  );\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('en-BD', {\n      style: 'currency',\n      currency: 'BDT',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const formatDate = (timestamp) => {\n    return new Date(timestamp).toLocaleDateString('en-BD', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'completed': return theme.success;\n      case 'pending': return theme.warning;\n      case 'cancelled': return theme.error;\n      default: return theme.textSecondary;\n    }\n  };\n\n  const getInstrumentName = (symbol, category) => {\n    if (category === 'stocks') {\n      const stock = dseStocks.find(s => s.symbol === symbol);\n      return stock ? stock.name : symbol;\n    } else if (category === 'mutualfunds') {\n      const fund = mutualFunds.find(f => f.symbol === symbol);\n      return fund ? fund.name : symbol;\n    } else if (category === 'gold') {\n      return 'Digital Gold';\n    }\n    return symbol;\n  };\n\n  const renderHoldings = () => (\n    <div className=\"holdings__section\">\n      {filteredHoldings.length === 0 ? (\n        <div className=\"empty__state\" style={{ color: theme.textSecondary }}>\n          <AccountBalanceWalletIcon style={{ fontSize: '4rem', opacity: 0.5 }} />\n          <h3>No Holdings Found</h3>\n          <p>You don't have any investments in the selected category.</p>\n          <Link to=\"/market\" className=\"btn btn-primary\">\n            <ShowChartIcon />\n            Start Investing\n          </Link>\n        </div>\n      ) : (\n        <div className=\"holdings__grid\">\n          {filteredHoldings.map((holding, index) => {\n            const returnPercent = ((holding.currentValue - holding.investedAmount) / holding.investedAmount) * 100;\n            const dayChangePercent = (holding.dayChange / holding.investedAmount) * 100;\n            \n            return (\n              <Link\n                key={index}\n                to={`/instrument/${holding.category}/${holding.symbol}`}\n                className=\"holding__card\"\n                style={{ backgroundColor: theme.card, border: `1px solid ${theme.border}` }}\n              >\n                <div className=\"holding__header\">\n                  <div className=\"holding__info\">\n                    <h4 style={{ color: theme.textPrimary }}>{holding.symbol}</h4>\n                    <p style={{ color: theme.textSecondary }}>\n                      {getInstrumentName(holding.symbol, holding.category)}\n                    </p>\n                  </div>\n                  <div className=\"holding__category\" style={{ backgroundColor: `${theme.primary}20`, color: theme.primary }}>\n                    {holding.category}\n                  </div>\n                </div>\n\n                <div className=\"holding__metrics\">\n                  <div className=\"metric__row\">\n                    <span style={{ color: theme.textSecondary }}>Quantity</span>\n                    <span style={{ color: theme.textPrimary }}>\n                      {holding.shares || holding.grams} {holding.category === 'gold' ? 'g' : 'shares'}\n                    </span>\n                  </div>\n                  \n                  <div className=\"metric__row\">\n                    <span style={{ color: theme.textSecondary }}>Avg Price</span>\n                    <span style={{ color: theme.textPrimary }}>৳{holding.avgPrice}</span>\n                  </div>\n                  \n                  <div className=\"metric__row\">\n                    <span style={{ color: theme.textSecondary }}>Current Price</span>\n                    <span style={{ color: theme.textPrimary }}>৳{holding.currentPrice}</span>\n                  </div>\n                </div>\n\n                <div className=\"holding__performance\">\n                  <div className=\"performance__item\">\n                    <span style={{ color: theme.textSecondary }}>Current Value</span>\n                    <span style={{ color: theme.textPrimary, fontWeight: 600, fontSize: '1.1rem' }}>\n                      {formatCurrency(holding.currentValue)}\n                    </span>\n                  </div>\n                  \n                  <div className=\"performance__item\">\n                    <span style={{ color: theme.textSecondary }}>Total Return</span>\n                    <div className={`return__value ${holding.totalReturn >= 0 ? 'positive' : 'negative'}`}>\n                      {holding.totalReturn >= 0 ? <TrendingUpIcon /> : <TrendingDownIcon />}\n                      <span style={{ color: holding.totalReturn >= 0 ? theme.positive : theme.negative }}>\n                        {formatCurrency(Math.abs(holding.totalReturn))} ({returnPercent >= 0 ? '+' : ''}{returnPercent.toFixed(2)}%)\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"performance__item\">\n                    <span style={{ color: theme.textSecondary }}>Today's Change</span>\n                    <div className={`return__value ${holding.dayChange >= 0 ? 'positive' : 'negative'}`}>\n                      {holding.dayChange >= 0 ? <TrendingUpIcon /> : <TrendingDownIcon />}\n                      <span style={{ color: holding.dayChange >= 0 ? theme.positive : theme.negative }}>\n                        {formatCurrency(Math.abs(holding.dayChange))} ({dayChangePercent >= 0 ? '+' : ''}{dayChangePercent.toFixed(2)}%)\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </Link>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n\n  const renderOrders = () => (\n    <div className=\"orders__section\">\n      {orders.length === 0 ? (\n        <div className=\"empty__state\" style={{ color: theme.textSecondary }}>\n          <HistoryIcon style={{ fontSize: '4rem', opacity: 0.5 }} />\n          <h3>No Orders Found</h3>\n          <p>You haven't placed any orders yet.</p>\n          <Link to=\"/market\" className=\"btn btn-primary\">\n            <ShowChartIcon />\n            Start Trading\n          </Link>\n        </div>\n      ) : (\n        <div className=\"orders__list\">\n          {orders.map((order, index) => (\n            <div\n              key={index}\n              className=\"order__card\"\n              style={{ backgroundColor: theme.card, border: `1px solid ${theme.border}` }}\n            >\n              <div className=\"order__header\">\n                <div className=\"order__info\">\n                  <h4 style={{ color: theme.textPrimary }}>{order.symbol}</h4>\n                  <p style={{ color: theme.textSecondary }}>\n                    {getInstrumentName(order.symbol, order.category)}\n                  </p>\n                </div>\n                <div className=\"order__status\">\n                  <span \n                    className=\"status__badge\"\n                    style={{ \n                      backgroundColor: `${getStatusColor(order.status)}20`, \n                      color: getStatusColor(order.status)\n                    }}\n                  >\n                    {order.status.charAt(0).toUpperCase() + order.status.slice(1)}\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"order__details\">\n                <div className=\"detail__row\">\n                  <span style={{ color: theme.textSecondary }}>Action</span>\n                  <span \n                    style={{ \n                      color: order.action === 'buy' ? theme.success : theme.error,\n                      fontWeight: 600,\n                      textTransform: 'capitalize'\n                    }}\n                  >\n                    {order.action}\n                  </span>\n                </div>\n                \n                <div className=\"detail__row\">\n                  <span style={{ color: theme.textSecondary }}>Type</span>\n                  <span style={{ color: theme.textPrimary, textTransform: 'capitalize' }}>\n                    {order.type}\n                  </span>\n                </div>\n                \n                <div className=\"detail__row\">\n                  <span style={{ color: theme.textSecondary }}>Quantity</span>\n                  <span style={{ color: theme.textPrimary }}>{order.quantity}</span>\n                </div>\n                \n                <div className=\"detail__row\">\n                  <span style={{ color: theme.textSecondary }}>Price</span>\n                  <span style={{ color: theme.textPrimary }}>৳{order.price}</span>\n                </div>\n                \n                <div className=\"detail__row total\">\n                  <span style={{ color: theme.textSecondary }}>Total</span>\n                  <span style={{ color: theme.textPrimary, fontWeight: 600 }}>\n                    {formatCurrency(order.total)}\n                  </span>\n                </div>\n                \n                <div className=\"detail__row\">\n                  <span style={{ color: theme.textSecondary }}>Date</span>\n                  <span style={{ color: theme.textPrimary }}>{formatDate(order.timestamp)}</span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"portfolio\" style={{ backgroundColor: theme.background, minHeight: 'calc(100vh - 70px)' }}>\n      <div className=\"portfolio__container\">\n        {/* Header */}\n        <div className=\"portfolio__header\">\n          <div>\n            <h1 style={{ color: theme.textPrimary }}>Portfolio</h1>\n            <p style={{ color: theme.textSecondary }}>\n              Track your investments and monitor performance\n            </p>\n          </div>\n        </div>\n\n        {/* Portfolio Summary */}\n        <div className=\"portfolio__summary\" style={{ backgroundColor: theme.card, border: `1px solid ${theme.border}` }}>\n          <div className=\"summary__main\">\n            <div className=\"total__value\">\n              <h3 style={{ color: theme.textSecondary }}>Total Portfolio Value</h3>\n              <h2 style={{ color: theme.textPrimary }}>{formatCurrency(portfolioSummary.totalValue)}</h2>\n            </div>\n            \n            <div className=\"summary__metrics\">\n              <div className=\"metric\">\n                <span style={{ color: theme.textSecondary }}>Total Invested</span>\n                <span style={{ color: theme.textPrimary }}>{formatCurrency(portfolioSummary.totalInvested)}</span>\n              </div>\n              \n              <div className=\"metric\">\n                <span style={{ color: theme.textSecondary }}>Total Return</span>\n                <div className={`metric__value ${portfolioSummary.totalReturn >= 0 ? 'positive' : 'negative'}`}>\n                  {portfolioSummary.totalReturn >= 0 ? <TrendingUpIcon /> : <TrendingDownIcon />}\n                  <span style={{ color: portfolioSummary.totalReturn >= 0 ? theme.positive : theme.negative }}>\n                    {formatCurrency(Math.abs(portfolioSummary.totalReturn))} (+{portfolioSummary.totalReturnPercent}%)\n                  </span>\n                </div>\n              </div>\n              \n              <div className=\"metric\">\n                <span style={{ color: theme.textSecondary }}>Today's Change</span>\n                <div className={`metric__value ${portfolioSummary.dayChange >= 0 ? 'positive' : 'negative'}`}>\n                  {portfolioSummary.dayChange >= 0 ? <TrendingUpIcon /> : <TrendingDownIcon />}\n                  <span style={{ color: portfolioSummary.dayChange >= 0 ? theme.positive : theme.negative }}>\n                    {formatCurrency(Math.abs(portfolioSummary.dayChange))} ({portfolioSummary.dayChangePercent >= 0 ? '+' : ''}{portfolioSummary.dayChangePercent}%)\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Tabs and Filters */}\n        <div className=\"portfolio__controls\">\n          <div className=\"portfolio__tabs\">\n            {tabs.map(tab => (\n              <button\n                key={tab.id}\n                className={`tab__button ${activeTab === tab.id ? 'tab__button--active' : ''}`}\n                onClick={() => setActiveTab(tab.id)}\n                style={{\n                  color: activeTab === tab.id ? theme.primary : theme.textSecondary,\n                  borderBottom: activeTab === tab.id ? `2px solid ${theme.primary}` : 'none',\n                  backgroundColor: activeTab === tab.id ? `${theme.primary}10` : 'transparent'\n                }}\n              >\n                <span>{tab.label}</span>\n                <span className=\"tab__count\">{tab.count}</span>\n              </button>\n            ))}\n          </div>\n\n          {activeTab === 'holdings' && (\n            <div className=\"filter__section\">\n              <FilterListIcon style={{ color: theme.textSecondary }} />\n              <select\n                value={filterCategory}\n                onChange={(e) => setFilterCategory(e.target.value)}\n                className=\"filter__select\"\n                style={{ backgroundColor: theme.card, color: theme.textPrimary, border: `1px solid ${theme.border}` }}\n              >\n                {categories.map(category => (\n                  <option key={category} value={category}>\n                    {category === 'all' ? 'All Categories' : category.charAt(0).toUpperCase() + category.slice(1)}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n        </div>\n\n        {/* Content */}\n        <div className=\"portfolio__content\">\n          {activeTab === 'holdings' && renderHoldings()}\n          {activeTab === 'orders' && renderOrders()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Portfolio;","/home/user/webapp/src/components/profile/Profile.js",[],"/home/user/webapp/src/theme/colors.js",[],"/home/user/webapp/src/data/bangladeshMarket.js",[],{"ruleId":"74","severity":1,"message":"75","line":219,"column":28,"nodeType":"76","endLine":219,"endColumn":73},{"ruleId":"74","severity":1,"message":"75","line":220,"column":13,"nodeType":"76","endLine":220,"endColumn":58},{"ruleId":"77","severity":1,"message":"78","line":1,"column":27,"nodeType":"79","messageId":"80","endLine":1,"endColumn":36},{"ruleId":"77","severity":1,"message":"81","line":13,"column":25,"nodeType":"79","messageId":"80","endLine":13,"endColumn":41},{"ruleId":"77","severity":1,"message":"82","line":178,"column":19,"nodeType":"79","messageId":"80","endLine":178,"endColumn":23},{"ruleId":"77","severity":1,"message":"83","line":110,"column":9,"nodeType":"79","messageId":"80","endLine":110,"endColumn":23},{"ruleId":"77","severity":1,"message":"83","line":65,"column":9,"nodeType":"79","messageId":"80","endLine":65,"endColumn":23},{"ruleId":"77","severity":1,"message":"84","line":22,"column":10,"nodeType":"79","messageId":"80","endLine":22,"endColumn":16},{"ruleId":"77","severity":1,"message":"85","line":22,"column":18,"nodeType":"79","messageId":"80","endLine":22,"endColumn":27},{"ruleId":"77","severity":1,"message":"78","line":1,"column":27,"nodeType":"79","messageId":"80","endLine":1,"endColumn":36},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setPortfolioData' is assigned a value but never used.","'name' is assigned a value but never used.","'formatCurrency' is assigned a value but never used.","'amount' is assigned a value but never used.","'setAmount' is assigned a value but never used."]